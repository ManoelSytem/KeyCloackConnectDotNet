@page "/secure"
@attribute [Authorize]
@inject OpenIdConnectOptions oidcOptions
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor ContextAccessor
@inject IConfiguration Configuration
@*@inject ClaimsPrincipal CurrentUser*@

<h3>aspnetcore-keycloak (blazor)</h3>

Secure:

<p>
    <a href="/">home</a><br />
</p>

<AuthorizeView Roles="admin">
    <p>role:you are part of 'admin'</p>
</AuthorizeView>

<AuthorizeView Roles="role1">
    <p>role:you are part of 'role1'</p>
</AuthorizeView>

<AuthorizeView>
    <ul>
        <li>
            ====================== HTTP =============================================
        </li>
        <li>
            user: @ContextAccessor.HttpContext.User.Identity.Name
        </li>
        <li>
            isAuthenticated: @ContextAccessor.HttpContext.User.Identity.IsAuthenticated
        </li>
        <li>
            access_token: @ContextAccessor.HttpContext.GetTokenAsync("access_token").Result
        </li>
        <li>
            id_token: @ContextAccessor.HttpContext.GetTokenAsync("id_token").Result
        </li>
        <li>
            refresh_token: @ContextAccessor.HttpContext.GetTokenAsync("refresh_token").Result
        </li>
        <li>
            ====================== CLAIMS =============================================
        </li>
        @foreach (var claim in ContextAccessor.HttpContext.User.Claims.OrderBy(c => c.Type))
        {
            <li>
                @claim.Type : @claim.Value
            </li>
        }

    </ul>

    <button class="btn btn-secondary" @onclick="@(() =>
            Oidc.UpdateTokenClaims(
                ((ClaimsIdentity)this.ContextAccessor.HttpContext.User.Identity),
                oidcOptions.Authority, oidcOptions.ClientId,oidcOptions.ClientSecret, true))">Refresh</button><br /><br />
</AuthorizeView>

<button @onclick="@Log">Write user info to console</button>

@code {
    private async Task Log()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var user1 = ContextAccessor.HttpContext.User.Identity.Name;
            Console.WriteLine($"user '{user.Identity.Name}' is authenticated.");
        }
        else
        {
            Console.WriteLine("user is NOT authenticated.");
        }
    }
}